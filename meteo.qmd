---
title: "Lien météo"
execute: 
  echo: false
---

# Etude de la concentration de la pollution à Perpignan

Toutes les données ont été mesurées entre le 01/10/2022 et le 30/09/2023 et proviennent de [SYNOP data](https://public.opendatasoft.com/explore/dataset/donnees-synop-essentielles-omm/api/?sort=date) pour les données météorologiques et de [Atmo Occitanie](https://data-atmo-occitanie.opendata.arcgis.com/pages/liste-des-flux) pour les données des polluants.

On étudie dans un premier temps la variation des moyennes des concentrations des polluants par mois puis par jour dans une période d'un an.
Ensuite, On essaie de mettre en évidence un lien entre différents facteurs météorologiques comme le vent et la température et certains polluants.

(TEMPORAIRE)<br>
PM10 : particule en suspension de diamètre inférieur à 10 μm provoquant une altération de la santé respiratoire.<br>
PM2.5 : particule fine en suspension de diamètre inférieur à 2,5 μm entraînant de plus une altération de la santé cardiovasculaire.<br>
O₃ : L'ozone est un polluant résultant de la transformation chimique d'autres polluants présents dans l'atmosphère (notamment NO, NO₂ et COV) sous l'action des rayonnements solaires.<br>
NOx : Emissions d’oxydes d'azote émises par la combustion des carburants fossiles participant fortement à l'effet de serre et regroupant le monoxyde d'azote (NO), le dioxyde d’azote (NO₂) et le protoxyde d’azote (N₂O).<br>
NO₂/NO : Le dioxyde d’azote (NO2) se forme dans l’atmosphère à partir du monoxyde d'azote (NO) qui se dégage essentiellement lors de la combustion de combustibles fossiles.

## Concentration mensuelle de pollution sur une année

```{python}
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

"""
DEFINITIONS ET FONCTIONS
"""

# Importer les valeurs
polluants = pd.read_csv("bases_de_donnees/donnees_polluants_2022_2023.csv", sep=",", na_values="", low_memory=False)

# Extraire le mois de chaque date
polluants['Date'] = pd.to_datetime(polluants['date_debut'])

# Définir les polluants
polluants_tous = ['PM10', 'O3', 'NOX', 'NO2', 'PM2.5', 'NO']
polluants_ozone = ['O3']
polluants_NOx = ['O3', 'NOX', 'NO2', 'NO']

couleur = ['orange', 'green','purple', 'red', 'blue', 'grey']

# Dictionnaire de correspondance entre les anciens et les nouveaux noms des mois
mois_mapping = {"01": "Janvier", "02": "Février", "03": "Mars", "04": "Avril", "05": "Mai", "06": "Juin", "07": "Juillet", "08": "Août", "09": "Septembre", "10": "Octobre", "11": "Novembre", "12": "Décembre"}

# Dictionnaire de correspondance entre les anciens et les nouveaux noms des jours
jours_mapping = {"Monday": "Lundi", "Tuesday": "Mardi", "Wednesday": "Mercredi", "Thursday": "Jeudi", "Friday": "Vendredi", "Saturday": "Samedi", "Sunday": "Dimanche"}

# Ordre jours
jours_ordre = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Graphique cartésien
def graphique(fig, titre, xaxis_title):
        fig.update_layout(
            title=titre,
            xaxis=dict(title=xaxis_title),
            yaxis=dict(title='Concentration (µg.m⁻³)', side='left', position=0),
            font_size=15,
            showlegend=True,
            paper_bgcolor="rgb(230, 230, 230)",
            legend=dict(x=1, y=1)
        )

# Graphique polaire
def graphique_polar(fig):
        fig.update_layout(
            font_size=15,
            showlegend=True,
            polar=dict(
                bgcolor="rgb(223, 223, 223)",
                angularaxis=dict(linewidth=3, showline=True, linecolor='black'),
                radialaxis=dict(showline=True, linewidth=2, gridcolor="white", gridwidth=2,)
            ),
            paper_bgcolor="rgb(230, 230, 230)"
        )

# Ajout courbe sur un graphique cartésien
def trace_mois(df, color, name, date):
        return go.Scatter(x=df[date], y=df["valeur"], mode='lines', line=dict(width=2, color=color), name=name)

# Graphique cartésien avec 2 axes y
def graphique_axe(fig, titre, yaxis2_title):
    fig.update_layout(
        title=titre,
        xaxis=dict(title='Temps (jours)'),
        yaxis=dict(title='Concentration (µg.m⁻³)', side='left', position=0),
        yaxis2=dict(title=yaxis2_title, overlaying='y',side='right', position=1),
        font_size=15,
        showlegend=True,
        paper_bgcolor="rgb(230, 230, 230)",
        legend=dict(x=1, y=1)
    )

# Traitement des polluants exclusivement
def concentration(date, format, mapping, titre, temps):
    polluants[date] = polluants['Date'].dt.strftime(format)

    resultat = []
    if date == 'Jour':
        # Moyenne des valeurs des polluants par jour
        for polluant in polluants_tous:
            # Moyenne des valeurs de chaque polluant par jour
            df_polluant = polluants[polluants['nom_poll'] == polluant].groupby(date)['valeur'].mean().reset_index()
            # Ajout de la colonne éponyme pour la reconnaître
            df_polluant['nom'] = polluant
            # Trier par date et la renommer
            df_polluant['Jour'] = pd.Categorical(df_polluant['Jour'], categories=jours_ordre, ordered=True)
            df_polluant = df_polluant.sort_values(date)
            df_polluant[date] = df_polluant[date].replace(mapping)
            resultat.append(df_polluant)
    else:
        # Moyenne des valeurs des polluants par mois
        for polluant in polluants_tous:
            # Moyenne des valeurs de chaque polluant par mois
            df_polluant = polluants[polluants['nom_poll'] == polluant].groupby(date)['valeur'].mean().reset_index()
            # Ajout de la colonne éponyme pour la reconnaître
            df_polluant['nom'] = polluant
            # Renommer la date
            df_polluant[date] = df_polluant[date].replace(mapping)
            resultat.append(df_polluant)
    
    # Récupérer les DataFrames individuels
    PM, O, NOX, NOO, PMM, NO = resultat

    # Concaténer tous les polluants
    resultat = pd.concat([NOX, NOO, NO, O, PM, PMM], ignore_index=True)


    """
    GRAPHIQUE
    """
    
    # Paramétrer le graphique polaire
    fig_polar = px.line_polar(
        resultat,
        r="valeur",
        theta=date,
        color="nom",
        line_close=True,
        range_r=[0, max(resultat["valeur"])],
        start_angle=90,
        color_discrete_sequence=couleur,
        title=titre,
    )

    graphique_polar(fig_polar)

    # Paramétrer le graphique cartésien
    fig = go.Figure()
    
    graphique(fig, titre, temps)

    # Ajouter les traces pour chaque polluant
    fig.add_trace(trace_mois(NOX, 'orange', 'NOx', date))
    fig.add_trace(trace_mois(NOO, 'green', 'NO₂', date))
    fig.add_trace(trace_mois(NO, 'purple', 'NO', date))
    fig.add_trace(trace_mois(O, 'red', 'O₃', date))
    fig.add_trace(trace_mois(PM, 'blue', 'PM₁₀', date))
    fig.add_trace(trace_mois(PMM, 'grey', 'PM2.5', date))

    # Afficher les graphiques
    fig_polar.show()
    fig.show()

# Graphique mois
concentration('Mois', '%m', mois_mapping, 'Concentration moyenne mensuelle des polluants (en µg.m⁻³)', 'Temps (mois)')
```
<br>
On remarque que la concentration d'oxydes d'azote (NOx, NO₂ et NO) est relativament stable entre Mars et Octobre (entre 51.5 et 79.5 µg.m⁻³ de NOx par exemple) mais beaucoup plus importante en période hivernale (entre 94.9 et 138.3 µg.m⁻³ de NOx entre Novembre et Février)
Cela peut être dû à plusieurs facteurs aussi bien artificiels (augmentation du chauffage, de la prise de véhicules, etc...) que naturels (augmentation des rejets automobiles, formation de particules fines par les cheminées, etc...).<br>
<br>
A contrario, la tendance est inversée concernant l'émission d'ozone (O₃) qui est stable mais importante entre Mars et Septembre (entre 71.2 et 79.0 µg.m⁻³ excepté en Juillet avec 62.3 µg.m⁻³) alors qu'elle est plus faible entre Octobre et Février (entre 44.8 et 56.3 µg.m⁻³ avec une baisse soudaine à 26.6 µg.m⁻³ en Décembre).
Cela s'explique par la dépendance de la formation de l'ozone à l'ensoleillement et à la chaleur qui varient selon les saisons et par conséquent régulent les transformations chimiques produisant le-dit polluant.

## Concentration quotidienne de pollution sur une année

```{python}
# Graphique jour
concentration('Jour', '%A', jours_mapping, 'Concentration moyenne quotidienne des polluants (en µg.m⁻³)', 'Temps (jours)')
```
<br>
On remarque que les concentrations d'oxydes d'azote et des particules PM10 sont stables en semaine (entre 72.5 et 91.6 µg.m⁻³ de NOx par exemple) exceptée une baisse soudaine le Dimanche (51.3 µg.m⁻³ de NOx) probablement due au fait qu'en majorité les gens ne travaillent pas ce jour-là.<br>
<br>
La quantité d'ozone est quant à elle très stable variant entre 60.1 et 64.4 µg.m⁻³ toute la semaine. Ceci s'explique par le fait que l'ensoleillement et la température varient relativement peu en une semaine. De même, les concentrations de particules en suspension varient très peu (entre 15.9 et 19.8 µg.m⁻³ pour PM10 et entre 8.2 et 8.8 µg.m⁻³ pour PM2.5).

## Lien entre le vent et la concentration de pollution

```{python}

"""
DONNEES
"""

# Importer les valeurs
donnees = pd.read_csv("bases_de_donnees/donnees_meteo_03_2023.csv", sep=";", na_values="", low_memory=False)
polluants = pd.read_csv("bases_de_donnees/donnees_polluants_03_2023.csv", sep=",", na_values="", low_memory=False)

# Renommer colonnes
colonne = {"Vitesse du vent moyen 10 mn": "valeur"}
donnees.rename(columns=colonne, inplace=True)

# Formater les dates
format_date = "%Y-%m-%d"
donnees["Date"] = donnees["Date"].apply(lambda x: x.split("T")[0])
donnees['Date'] = pd.to_datetime(donnees['Date'])
donnees['Date'] = donnees['Date'].dt.strftime(format_date)


"""
VENT
"""

# Vitesse moyenne du vent chaque jour de la période
vent_moy = donnees.groupby('Date')['valeur'].mean().reset_index()

# Conversion en km/h
vent_moy['valeur'] = vent_moy['valeur'].multiply(3.6)


"""
POLLUANTS
"""

# Extraire la date sans l'heure de 'date_debut'
polluants['Date'] = pd.to_datetime(polluants['date_debut'])
polluants['Date'] = polluants['Date'].dt.strftime(format_date)

# Moyenne des valeurs des polluants par jour
NOX = polluants[(polluants['nom_poll'] == 'NOX')].groupby('Date')['valeur'].mean().reset_index()
NOO = polluants[(polluants['nom_poll'] == 'NO2')].groupby('Date')['valeur'].mean().reset_index()
NO = polluants[(polluants['nom_poll'] == 'NO')].groupby('Date')['valeur'].mean().reset_index()

"""
GRAPHIQUE
"""

# Créer la trace
trace1 = go.Scatter(x=NOX["Date"], y=NOX["valeur"], mode='lines', line=dict(width=2, color='orange'), name='NOx')
trace2 = go.Scatter(x=NOO["Date"], y=NOO["valeur"], mode='lines', line=dict(width=2, color='green'), name='NO₂')
trace3 = go.Scatter(x=NO["Date"], y=NO["valeur"], mode='lines', line=dict(width=2, color='purple'), name='NO')
# Ajouter la trace pour le vecteur vent_moy sur le deuxième axe Y
trace_vent_moy = go.Scatter(x=vent_moy["Date"], y=vent_moy["valeur"], mode='lines', line=dict(width=2, color='black'), name='Vent', yaxis='y2')

# Créer la figure
fig = go.Figure([trace1, trace2, trace3, trace_vent_moy])

graphique_axe(fig, "Vitesse du vent et émissions d'oxydes d'azote (mars 2023)", 'Vitesse (km.h⁻¹)')

# Afficher le graphique
fig.show()
```
<br>
On remarque que lorsque la vitesse du vent augmente fortement et dépasse une certaine valeur (ici au moins 35 km.h⁻¹), la courbe d'émission des différents gaz diminue en conséquence.<br>
En effet, les trois pics de vitesse du vent évalués à 39.6, 39.5 et 35.3 km.h⁻¹ correspondent respectivement aux trois valeurs les plus faibles d'émission de NOx par exemple, c'est-à-dire 26.1, 43.9 et 33.4 µg.m⁻³.

## Lien entre la température et la concentration d'ozone'

```{python}
# Graphique faisant le lien entre une donnée météorologique et certains polluants en 2023
# Importer les valeurs
donnees = pd.read_csv(f"bases_de_donnees/donnees_meteo_2022_2023.csv", sep=";", na_values="", low_memory=False)
polluants = pd.read_csv(f"bases_de_donnees/donnees_polluants_2022_2023.csv", sep=",", na_values="", low_memory=False)

# Renommer colonnes
colonne = {'Température': "valeur"}
donnees.rename(columns=colonne, inplace=True)

# Formater les dates
donnees["Date"] = donnees["Date"].apply(lambda x: x.split("T")[0])
donnees['Date'] = pd.to_datetime(donnees['Date'])
donnees['Date'] = donnees['Date'].dt.strftime(format_date)


"""
TEMPERATURE
"""
# Vitesse moyenne du vent chaque jour de la période
temp_moy = donnees.groupby('Date')['valeur'].mean().reset_index()

"""
POLLUANTS
"""

# Extraire la date sans l'heure de 'date_debut'
polluants['Date'] = pd.to_datetime(polluants['date_debut'])

# Moyenne des valeurs des polluants par jour
O = polluants[(polluants['nom_poll'] == 'O3')].groupby(
        'Date')['valeur'].mean().reset_index()


"""
GRAPHIQUE
"""

# Créer la trace
trace1 = go.Scatter(x=O["Date"], y=O["valeur"], mode='lines', line=dict(width=2, color='orange'), name='O₃')

# Ajouter la trace pour le vecteur vent_moy sur le deuxième axe Y
trace_temp_moy = go.Scatter(x=temp_moy["Date"], y=temp_moy["valeur"], mode='lines', line=dict(width=2, color='black'), name='Température', yaxis='y2')

# Créer de la figure
fig = go.Figure([trace1, trace_temp_moy])

graphique_axe(fig, "Température et concentration d'ozone", 'Température (°C)')

# Afficher le graphique
fig.show()
```
<br>
On ne remarque pas de lien particulier entre la température et la concentration d'ozone dans l'air sur cette période. L'indice UV pourrait être une donnée plus pertinente à comparer que la température mais elle n'est pas disponible dans les données recueillies.