---
title: "Lien météo"
execute: 
  echo: false
---

# Lien entre la météo et le taux de pollution

```{python}
"""
EXEMPLE COURS
"""

%matplotlib inline
import os
import numpy as np
import calendar
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from cycler import cycler
import pooch  # download data / avoid re-downloading
from IPython import get_ipython
import lzma  # to process zip file
import plotly.express as px

# url = "https://koumoul.com/s/data-fair/api/v1/datasets/accidents-velos/raw"
url_db = "https://github.com/josephsalmon/HAX712X/raw/main/Data/accidents-velos_2022.csv.xz"
path_target = "./bicycle_db.csv.xz"
path, fname = os.path.split(path_target)
pooch.retrieve(url_db, path=path, fname=fname, known_hash=None)
with lzma.open(path_target) as f:
    file_content = f.read().decode('utf-8')

# Charger le fichier JSON dans un dictionnaire
with open("./bicycle_db.csv", 'w') as f:
    f.write(file_content)

# Charger le fichier csv dans un tableau exploitable
df_bikes = pd.read_csv("bicycle_db.csv", na_values="", low_memory=False,
                    dtype={'data': str, 'heure': str, 'departement': str})

# Renommer les colonnes
new2old = {
    "hrmn": "heure",
    "secuexist": "existence securite",
    "grav": "gravite accident",
    "dep": "departement",
}
df_bikes.rename(columns=new2old, inplace=True)

df_bikes.fillna({'heure':'0'}, inplace=True)

df_bikes['date'] + ' ' + df_bikes['heure']

time_improved = pd.to_datetime(
    df_bikes["date"] + " " + df_bikes["heure"],
    format="%Y-%m-%d %H",
    errors="coerce",
)

df_bikes["Time"] = time_improved
# remove rows with NaT
df_bikes.dropna(subset=["Time"], inplace=True)
# set new index
df_bikes.set_index("Time", inplace=True)
# remove useless columns
df_bikes.drop(columns=["heure", "date"], inplace=True)


df_bike2 = df_bikes.loc[
    :, ["gravite accident", "existence securite", "age", "sexe"]
]
df_bike2["existence securite"].replace({"Inconnu": np.nan}, inplace=True)
df_bike2.dropna(inplace=True)

df_bikes["weekday"] = df_bikes.index.day_of_week  # Monday=0, Sunday=6


df_polar = (
    df_bikes.groupby(["weekday", df_bikes.index.hour])["sexe"]
    .count()
    .reset_index()
)  # all variable are similar in this sense, sexe could be replaced by age for instance here. XXX to simplify

df_polar = df_polar.astype({"Time": str}, copy=False)
df_polar["weekday"] = df_polar["weekday"].apply(lambda x: calendar.day_abbr[x])
df_polar.rename(columns={"sexe": "accidents"}, inplace=True)

fig = px.line_polar(
    df_polar,
    r="accidents",
    theta="Time",
    color="weekday",
    line_close=True,
    range_r=[0, 600],
    start_angle=0,
    color_discrete_sequence=px.colors.sequential.Plasma_r,
    title="Daily accident profile: weekday effect?",
)

fig.show()
```

```{python}
"""
METEO
"""
# url_vent = "https://public.opendatasoft.com/explore/embed/dataset/donnees-synop-essentielles-omm/table/?sort=date&q.timerange.date=date:%5B2020-09-07T22:00:00Z%20TO%202020-10-08T21:59:59Z%5D&refine.nom=PERPIGNAN&refine.nom_reg=Occitanie&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQVZHIiwieUF4aXMiOiJmZiIsInNjaWVudGlmaWNEaXNwbGF5Ijp0cnVlLCJjb2xvciI6IiNGRjUxNUEifV0sInhBeGlzIjoiZGF0ZSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6ImRheSIsInNvcnQiOiIiLCJjb25maWciOnsiZGF0YXNldCI6ImRvbm5lZXMtc3lub3AtZXNzZW50aWVsbGVzLW9tbSIsIm9wdGlvbnMiOnsic29ydCI6ImRhdGUiLCJxLnRpbWVyYW5nZS5kYXRlIjoiZGF0ZTpbMjAyMC0wOS0wN1QyMjowMDowMFogVE8gMjAyMC0xMC0wOFQyMTo1OTo1OVpdIiwicmVmaW5lLm5vbSI6IlBFUlBJR05BTiIsInJlZmluZS5ub21fcmVnIjoiT2NjaXRhbmllIn19fV0sImRpc3BsYXlMZWdlbmQiOnRydWUsImFsaWduTW9udGgiOnRydWV9"

# Charger le fichier JSON dans un dictionnaire
with open("./donnees_vent.csv", 'w') as f:
    f.write(file_content)

vent = pd.read_csv("donnees_vent.csv", na_values="", low_memory=False)
print(vent)

```
Influence du vent sur le niveau de pollution à Perpignan